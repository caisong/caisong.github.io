<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Caisong's Blog</title><link>https://caisong.github.io/tags/git/</link><description>Recent content in Git on Caisong's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 06 Nov 2024 21:40:29 +0800</lastBuildDate><atom:link href="https://caisong.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>beyond compare设置git diff</title><link>https://caisong.github.io/posts/bc%E8%AE%BE%E7%BD%AEgit%E5%AF%B9%E6%AF%94/</link><pubDate>Wed, 06 Nov 2024 21:40:29 +0800</pubDate><guid>https://caisong.github.io/posts/bc%E8%AE%BE%E7%BD%AEgit%E5%AF%B9%E6%AF%94/</guid><description>&lt;p>bc设置git 对比&lt;/p></description></item><item><title>Git地址替换</title><link>https://caisong.github.io/posts/git%E5%9C%B0%E5%9D%80%E6%9B%BF%E6%8D%A2/</link><pubDate>Fri, 14 Apr 2023 21:42:13 +0800</pubDate><guid>https://caisong.github.io/posts/git%E5%9C%B0%E5%9D%80%E6%9B%BF%E6%8D%A2/</guid><description>&lt;p>设置git直接替换镜像地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git config url.https://hub.njuu.cf/.insteadof https://github.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Git修改已提交的commit</title><link>https://caisong.github.io/posts/git%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84commitissue12uolcanob/</link><pubDate>Fri, 03 Sep 2021 21:42:14 +0800</pubDate><guid>https://caisong.github.io/posts/git%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84commitissue12uolcanob/</guid><description>&lt;p>&lt;a href="https://github.com/uolcano/blog/issues/12" title="git">git 修改已提交的commit&lt;/a>&lt;/p></description></item><item><title>Git实用命令</title><link>https://caisong.github.io/posts/git%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4httpsgithub.comuolcanoblogiss/</link><pubDate>Fri, 03 Sep 2021 21:42:00 +0800</pubDate><guid>https://caisong.github.io/posts/git%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4httpsgithub.comuolcanoblogiss/</guid><description>&lt;p>&lt;a href="https://github.com/uolcano/blog/issues/12">git 实用命令&lt;/a>&lt;/p>
&lt;p>git虽好，但总会遇到一些不希望的提交，所以就会有增删改某次或某些提交的需求。下面收集一下，修改本地和远程版本历史的一些方法。&lt;/p>
&lt;h2 id="本地修改">本地修改&lt;/h2>
&lt;p>由于以下修改本身是对版本历史的修改，在需要push到远程仓库时，往往是不成功的，只能强行push，这样会出现的一个问题就是，如果你是push到多人协作的远程仓库中，会对其他人的远程操作构成影响。通常情况下，建议与项目远程仓库的管理员进行沟通，在完成你强制push操作后，通知其他人同步。&lt;/p>
&lt;pre>&lt;code>修改最近一次的commit

修改提交的描述

git commit --amend

然后会进入一个文本编辑器界面，修改commit的描述内容，即可完成操作。

修改提交的文件

git add &amp;lt;filename&amp;gt; # 或者 git rm
git commit --amend # 将缓存区的内容做为最近一次提交

修改任意提交历史位置的commit

可以通过变基命令，修改最近一次提交以前的某次提交。不过修改的提交到当前提交之间的所有提交的hash值都会改变。
变基操作需要非常小心，一定要多用git status命令来查看你是否还处于变基操作，可能某次误操作的会对后面的提交历史造成很大影响。

首先查看提交日志，以便变基后，确认提交历史的修改

git log

变基操作。 可以用commit~n或commit^^这种形式替代：前者表示当前提交到n次以前的提交，后者^符号越多表示的范围越大，commit可以是HEAD或者某次提交的hash值；-i参数表示进入交互模式。

git rebase -i &amp;lt;commit range&amp;gt;

以上变基命令会进入文本编辑器，其中每一行就是某次提交，把pick修改为edit，保存退出该文本编辑器。

**注意：**变基命令打开的文本编辑器中的commit顺序跟git log查看的顺序是相反的，也就是最近的提交在下面，老旧的提交在上面

**注意：**变基命令其实可以同时对多个提交进行修改，只需要修改将对应行前的pick都修改为edit，保存退出后会根据你修改的数目多次打开修改某次commit的文本编辑器界面。但是这个范围内的最终祖先commit不能修改，也就是如果有5行commit信息，你只能修改下面4行的，这不仅限于commit修改，重排、删除以及合并都如此。

git commit --amend

接下来修改提交描述内容或者文件内容，跟最近一次的commit的操作相同，不赘述。

然后完成变基操作

git rebase --continue

有时候会完成变基失败，需要git add --all才能解决，一般git会给出提示。

再次查看提交日志，对比变基前后的修改，可以看到的内的所有提交的hash值都被修改了

git log

如果过了一段时间后，你发现这次历史修改有误，想退回去怎么办？请往下继续阅读

重排或删除某些提交

变基命令非常强大，还可以将提交历史重新手动排序或者删除某次提交。这为某些误操作，导致不希望公开信息的提交，提供了补救措施

git rebase -i &amp;lt;commit range&amp;gt;

如前面描述，这会进入文本编辑器，对某行提交进行排序或者删除，保存退出。可以是多行修改。

后续操作同上。

合并多次提交

非关键性的提交太多会让版本历史很难看、冗余，所以合并多次提交也是挺有必要的。同样是使用以上的变基命令，不同的是变基命令打开的文本编辑器里的内容的修改。

将pick修改为squash，可以是多行修改，然后保存退出。这个操作会将标记为squash的所有提交，都合并到最近的一个祖先提交上。

**注意：**不能对的第一行commit进行修改，至少保证第一行是接受合并的祖先提交。

后续操作同上。

分离某次提交

变基命令还能分离提交，这里不描述，详情查看后面的参考链接

终极手段

git还提供了修改版本历史的“大杀器”——filter-branch，可以对整个版本历史中的每次提交进行修改，可用于删除误操作提交的密码等敏感信息。

删除所有提交中的某个文件

git filter-branch --treefilter 'rm -f password.txt' HEAD

将新建的主目录作为所有提交的根目录

git filter-branch --subdirectory-filter trunk HEAD
&lt;/code>&lt;/pre>
&lt;h2 id="本地回退">本地回退&lt;/h2>
&lt;p>回退操作也是对过往提交的一剂“后悔药”，常用的回退方式有三种：checkout、reset和revert&lt;/p></description></item><item><title>常用操作</title><link>https://caisong.github.io/posts/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link><pubDate>Sat, 28 Oct 2017 20:09:06 +0800</pubDate><guid>https://caisong.github.io/posts/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid><description>&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>代理设置&lt;/li>
&lt;li>git 操作&lt;/li>
&lt;li>文件夹比较&lt;/li>
&lt;li>flash 分区&lt;/li>
&lt;li>阻止软件更新&lt;/li>
&lt;li>docker设置国内镜像&lt;/li>
&lt;li>linux语言环境设置&lt;/li>
&lt;/ul></description></item></channel></rss>